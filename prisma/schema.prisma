generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  hashedPassword  String
  createdAt       DateTime?        @default(now())
  emailVerified   DateTime?
  verifiedEmail   String?
  userType        UserType         @default(FREE)
  queryCount      Int              @default(3)
  cooldownEnd     DateTime?
  ips             IPAddress[]
  lessons         Lesson[]
  Payment         Payment[]
  Queries         Queries[]
  UserHistory     UserHistory[]
  SandboxScripts  SandboxScript[]
  team            Team?            @relation(fields: [teamId], references: [id])
  teamId          Int?
  BookmarkScripts BookmarkScript[]
  QueryTracking   QueryTracking[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  userId    Int
  completed Boolean
  createdAt DateTime @default(now())
  lessonId  Int
  user      User     @relation(fields: [userId], references: [id])
}

model IPAddress {
  id              Int       @id @default(autoincrement())
  address         String    @unique
  userId          Int
  createdAt       DateTime? @default(now())
  hashedUserAgent String?
  queryCount      Int       @default(3)
  cooldownEnd     DateTime?
  user            User      @relation(fields: [userId], references: [id])
}

model QueryTracking {
  id      Int    @id @default(autoincrement())
  address String @unique
  userId  Int?

  transactionQueryCount       Int       @default(3)
  transactionQueryCooldownEnd DateTime?

  rpcQueryCount       Int       @default(3)
  rpcQueryCooldownEnd DateTime?

  createdAt DateTime @default(now())

  User User? @relation(fields: [userId], references: [id])
}

model Queries {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime? @default(now())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  userType    UserType  @default(BEGINNER)
  queryCount  Int       @default(3)
  cooldownEnd DateTime?
}

model Payment {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now())
  userId             Int?
  paymentDate        DateTime?
  status             PaymentStatus    @default(CREATED)
  amount             Int
  accountTier        AccountTier      @default(BEGINNER_BOB)
  paymentOption      PaymentOption
  paymentLength      PaymentLength
  validUntil         DateTime?
  startedAt          DateTime?
  hasAccess          Boolean          @default(false)
  paymentProcessor   PaymentProcessor
  paymentProcessorId String

  stripeCustomerId      String?
  stripeSubscriptionId  String?
  stripePaymentIntentId String?

  paymentProcessorMetadata Json?
  hostedCheckoutUrl        String?
  User                     User?   @relation(fields: [userId], references: [id])

  paymentType PaymentType @default(INIVIDUAL)

  team   Team? @relation(fields: [teamId], references: [id])
  teamId Int?
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  payments Payment[]

  stripeProductId  String
  stripeCustomerId String
  users            User[]
}

model UserHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  metadata  Json?
  User      User     @relation(fields: [userId], references: [id])
}

enum PaymentType {
  INIVIDUAL
  TEAM
}

enum UserType {
  FREE
  BEGINNER
  ADVANCED
}

enum PaymentProcessor {
  STRIPE
  OPEN_NODE
}

enum AccountTier {
  BEGINNER_BOB
  ADVANCED_ALICE
}

enum PaymentLength {
  ONE_MONTH
  ONE_YEAR
  LIFETIME
  ONE_DAY
  THREE_MONTHS
}

enum PaymentOption {
  USD
  BTC
  LIGHTNING
}

enum PaymentStatus {
  CREATED
  PROCESSING
  PAID
  UNPAID
  REFUNDED
  FAILED
}
enum ScriptType {
  FREEFORM
  PUBKEY_SIGSCRIPT
  PUBKEY_WITNESS
}



// model SandboxScript {
//   id          Int    @id @default(autoincrement())
//   content     String
//   userId      Int
//   user        User   @relation(fields: [userId], references: [id])
//   name        String
//   description String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())
// }

model SandboxScript {
  id              Int       @id @default(autoincrement())
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  name            String
  // content         String
  description     String?
  scriptType      ScriptType
  freeformContent String?
  pubkeyScript    String?
  sigScript       String?
  witnessScript   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())

  @@index([userId])
}

model BookmarkScript {
  id       Int  @id @default(autoincrement())
  userId   Int
  user     User @relation(fields: [userId], references: [id])
  scriptId Int

  createdAt DateTime @default(now())
}
