// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  FREE
  BEGINNER
  ADVANCED
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  createdAt      DateTime?     @default(now())
  emailVerified  DateTime?
  verifiedEmail  String?
  hashedPassword String
  ips            IPAddress[]
  lessons        Lesson[]
  Payment        Payment[]
  UserHistory    UserHistory[]
  userType UserType @default(FREE)
  queryCount  Int       @default(10) // For Beginner Bob
  cooldownEnd DateTime? // Time when the cooldown period ends
}

model Lesson {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  completed Boolean
  createdAt DateTime @default(now())
  lessonId  Int
}

model IPAddress {
  id              Int       @id @default(autoincrement())
  address         String
  createdAt       DateTime? @default(now())
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  hashedUserAgent String?
  queryCount      Int       @default(3)  // Number of remaining queries
  cooldownEnd     DateTime? // Time when the cooldown period ends
}


model Payment {
  id                       Int              @id @default(autoincrement())
  createdAt                DateTime         @default(now())
  status                   PaymentStatus    @default(CREATED)
  amount                   Int
  paymentOption            PaymentOption
  paymentLength            PaymentLength
  paymentProcessor         PaymentProcessor
  paymentProcessorId       String
  hostedCheckoutUrl        String?
  validUntil               DateTime?
  startedAt                DateTime?
  paymentDate              DateTime?
  hasAccess                Boolean          @default(false)
  userId                   Int?
  User                     User?            @relation(fields: [userId], references: [id])
  paymentProcessorMetadata Json?
}

enum PaymentProcessor {
  STRIPE
  OPEN_NODE
}

enum PaymentLength {
  ONE_MONTH
  ONE_YEAR
  LIFETIME
}

enum PaymentOption {
  USD
  BTC
  LIGHTNING
}

enum PaymentStatus {
  CREATED
  PROCESSING
  PAID
  UNPAID
  REFUNDED
  FAILED
}

model UserHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])

  metadata Json?
}
