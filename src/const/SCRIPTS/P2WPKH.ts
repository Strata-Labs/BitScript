import { SCRIPT_DATA_STACK } from "@/SCRIPT_ANIMATION_LIB";
import { OP_DUP_STEPS } from "../OP_CODES/DUP";
import { SCRIPTS_PAGE_PROPS } from "@/comp/scripts/ScriptView";
import {
  CodeBlockType,
  CodeDisplayBlock,
} from "@/comp/scripts/ScriptVideoContainer";

export const P2WPKH_STEPS: SCRIPT_DATA_STACK[] = [
  //step 1
  {
    beforeStack: [],
    currentStack: [
      {
        dataHex: "3c7369673e",
        dataString: "witness",
      },
    ],
    stackData: {
      dataHex: "3c7369673e",
      dataNumber: 0,
      dataString: "Witness",
    },
  },

  // step 2

  {
    beforeStack: [
      {
        dataHex: "3c7369673e",
        dataString: "witness",
      },
    ],
    currentStack: [
      {
        dataBinary: {},
        dataBytes: {
          "0": 60,
          "1": 115,
          "2": 105,
          "3": 103,
          "4": 62,
        },
        dataHex: "3c7369673e",
        dataString: "<sig>",
      },
      {
        dataHex: "3c7075626b65793e",
        dataString: "<pubkey>",
      },
    ],
    opCode: {
      name: "OP_DECODE",
      number: 118,
      hex: "0x76",
      description: "Duplicates the top stack item.",
    },
  },

  //step 3

  {
    beforeStack: [
      {
        dataHex: "3c7369673e",
        dataString: "lockscript",
      },
    ],
    currentStack: [
      {
        dataBinary: {},
        dataBytes: {
          "0": 60,
          "1": 115,
          "2": 105,
          "3": 103,
          "4": 62,
        },
        dataHex: "3c7369673e",
        dataString: "<OP_0>",
      },
      {
        dataHex: "3c7075626b65793e",
        dataString: "<pubkeyhash>",
      },
    ],
    opCode: {
      name: "OP_DECODE",
      number: 118,
      hex: "0x76",
      description: "Duplicates the top stack item.",
    },
  },

  //step 4

  {
    beforeStack: [
      {
        dataHex: "3c7369673e",
        dataString: "<sig>",
      },
      {
        dataHex: "3c7075626b65793e",
        dataString: "<pubkey>",
      },
    ],
    currentStack: [
      {
        dataBinary: {},
        dataBytes: {
          "0": 60,
          "1": 115,
          "2": 105,
          "3": 103,
          "4": 62,
        },
        dataHex: "3c7369673e",
        dataString: "<sig>",
      },
      {
        dataHex: "3c7075626b65793e",
        dataString: "<pubkey>",
      },
      {
        dataHex: "3c7075626b65793e",
        dataString: "<pubkey>",
      },
    ],
    opCode: {
      name: "OP_DUP",
      number: 118,
      hex: "0x76",
      description: "Duplicates the top stack item.",
    },
  },

  //step  5
  {
    beforeStack: [
      {
        dataHex: "3c7369673e",
        dataString: "<sig>",
      },
      {
        dataHex: "3c7075626b65793e",
        dataString: "<pubkey>",
      },
      {
        dataHex: "3c7075626b65793e",
        dataString: "<pubkey>",
      },
    ],
    currentStack: [
      {
        dataHex: "3c7369673e",
        dataString: "<sig>",
      },
      {
        dataHex: "3c7075626b65793e434",
        dataString: "<pubkey>",
      },
      {
        dataHex:
          "34643431323736306634626530393339666139316365633162326436333564373363613738333535",
        dataString: "4d4127...",
      },
    ],
    opCode: {
      name: "OP_HASH160",
      number: 169,
      hex: "0xa9",
      description:
        "Input is hashed twice. First with SHA256 then with RIPEMD-160.",
    },
  },

  // step 6
  {
    beforeStack: [
      {
        dataHex: "3c7369673e",
        dataString: "<sig>",
      },
      {
        dataBinary: {},
        dataBytes: {
          "0": 60,
          "1": 112,
          "2": 117,
          "3": 98,
          "4": 107,
          "5": 101,
          "6": 121,
          "7": 62,
        },
        dataHex: "3c7075626b65793e",
        dataString: "<pubkey>",
      },
      {
        dataBinary: {},
        dataBytes: {
          "0": 52,
          "1": 100,
          "2": 52,
          "3": 49,
          "4": 50,
          "5": 55,
          "6": 54,
          "7": 48,
          "8": 102,
          "9": 52,
          "10": 98,
          "11": 101,
          "12": 48,
          "13": 57,
          "14": 51,
          "15": 57,
          "16": 102,
          "17": 97,
          "18": 57,
          "19": 49,
          "20": 99,
          "21": 101,
          "22": 99,
          "23": 49,
          "24": 98,
          "25": 50,
          "26": 100,
          "27": 54,
          "28": 51,
          "29": 53,
          "30": 100,
          "31": 55,
          "32": 51,
          "33": 99,
          "34": 97,
          "35": 55,
          "36": 56,
          "37": 51,
          "38": 53,
          "39": 53,
        },
        dataHex:
          "34643431323736306634626530393339666139316365633162326436333564373363613738333535",
        dataString: "4d4127...",
      },
    ],
    currentStack: [
      {
        dataBinary: {},
        dataBytes: {
          "0": 60,
          "1": 115,
          "2": 105,
          "3": 103,
          "4": 62,
        },
        dataHex: "3c7369673e",
        dataString: "<sig>",
      },
      {
        dataBinary: {},
        dataBytes: {
          "0": 60,
          "1": 112,
          "2": 117,
          "3": 98,
          "4": 107,
          "5": 101,
          "6": 121,
          "7": 62,
        },
        dataHex: "3c7075626b65793e",
        dataString: "<pubkey>",
      },
      {
        dataBinary: {},
        dataBytes: {
          "0": 52,
          "1": 100,
          "2": 52,
          "3": 49,
          "4": 50,
          "5": 55,
          "6": 54,
          "7": 48,
          "8": 102,
          "9": 52,
          "10": 98,
          "11": 101,
          "12": 48,
          "13": 57,
          "14": 51,
          "15": 57,
          "16": 102,
          "17": 97,
          "18": 57,
          "19": 49,
          "20": 99,
          "21": 101,
          "22": 99,
          "23": 49,
          "24": 98,
          "25": 50,
          "26": 100,
          "27": 54,
          "28": 51,
          "29": 53,
          "30": 100,
          "31": 55,
          "32": 51,
          "33": 99,
          "34": 97,
          "35": 55,
          "36": 56,
          "37": 51,
          "38": 53,
          "39": 53,
        },
        dataHex:
          "34643431323736306634626530393339666139316365633162326436333564373363613738333535",
        dataString: "4d4127...",
      },
      {
        dataBinary: {},
        dataBytes: {
          "0": 52,
          "1": 100,
          "2": 52,
          "3": 49,
          "4": 50,
          "5": 55,
          "6": 54,
          "7": 48,
          "8": 102,
          "9": 52,
          "10": 98,
          "11": 101,
          "12": 48,
          "13": 57,
          "14": 51,
          "15": 57,
          "16": 102,
          "17": 97,
          "18": 57,
          "19": 49,
          "20": 99,
          "21": 101,
          "22": 99,
          "23": 49,
          "24": 98,
          "25": 50,
          "26": 100,
          "27": 54,
          "28": 51,
          "29": 53,
          "30": 100,
          "31": 55,
          "32": 51,
          "33": 99,
          "34": 97,
          "35": 55,
          "36": 56,
          "37": 51,
          "38": 53,
          "39": 53,
        },
        dataHex:
          "34643431323736306634626530393339666139316365633162326436333564373363613738333535",
        dataString: "4d4127...",
      },
    ],
    stackData: {
      dataBinary: {},
      dataBytes: {
        "0": 52,
        "1": 100,
        "2": 52,
        "3": 49,
        "4": 50,
        "5": 55,
        "6": 54,
        "7": 48,
        "8": 102,
        "9": 52,
        "10": 98,
        "11": 101,
        "12": 48,
        "13": 57,
        "14": 51,
        "15": 57,
        "16": 102,
        "17": 97,
        "18": 57,
        "19": 49,
        "20": 99,
        "21": 101,
        "22": 99,
        "23": 49,
        "24": 98,
        "25": 50,
        "26": 100,
        "27": 54,
        "28": 51,
        "29": 53,
        "30": 100,
        "31": 55,
        "32": 51,
        "33": 99,
        "34": 97,
        "35": 55,
        "36": 56,
        "37": 51,
        "38": 53,
        "39": 53,
      },
      dataHex:
        "34643431323736306634626530393339666139316365633162326436333564373363613738333535",
      dataNumber: 0,
      dataString: "4d4127...",
    },
  },

  //step 7
  {
    beforeStack: [
      {
        dataBinary: {},
        dataBytes: {
          "0": 60,
          "1": 115,
          "2": 105,
          "3": 103,
          "4": 62,
        },
        dataHex: "3c7369673e",
        dataString: "<sig>",
      },
      {
        dataBinary: {},
        dataBytes: {
          "0": 60,
          "1": 112,
          "2": 117,
          "3": 98,
          "4": 107,
          "5": 101,
          "6": 121,
          "7": 62,
        },
        dataHex: "3c7075626b65793e",
        dataString: "<pubkey>",
      },
      {
        dataBinary: {},
        dataBytes: {
          "0": 52,
          "1": 100,
          "2": 52,
          "3": 49,
          "4": 50,
          "5": 55,
          "6": 54,
          "7": 48,
          "8": 102,
          "9": 52,
          "10": 98,
          "11": 101,
          "12": 48,
          "13": 57,
          "14": 51,
          "15": 57,
          "16": 102,
          "17": 97,
          "18": 57,
          "19": 49,
          "20": 99,
          "21": 101,
          "22": 99,
          "23": 49,
          "24": 98,
          "25": 50,
          "26": 100,
          "27": 54,
          "28": 51,
          "29": 53,
          "30": 100,
          "31": 55,
          "32": 51,
          "33": 99,
          "34": 97,
          "35": 55,
          "36": 56,
          "37": 51,
          "38": 53,
          "39": 53,
        },
        dataHex:
          "34643431323736306634626530393339666139316365633162326436333564373363613738333535",
        dataString: "4d4127...",
      },
      {
        dataBinary: {},
        dataBytes: {
          "0": 52,
          "1": 100,
          "2": 52,
          "3": 49,
          "4": 50,
          "5": 55,
          "6": 54,
          "7": 48,
          "8": 102,
          "9": 52,
          "10": 98,
          "11": 101,
          "12": 48,
          "13": 57,
          "14": 51,
          "15": 57,
          "16": 102,
          "17": 97,
          "18": 57,
          "19": 49,
          "20": 99,
          "21": 101,
          "22": 99,
          "23": 49,
          "24": 98,
          "25": 50,
          "26": 100,
          "27": 54,
          "28": 51,
          "29": 53,
          "30": 100,
          "31": 55,
          "32": 51,
          "33": 99,
          "34": 97,
          "35": 55,
          "36": 56,
          "37": 51,
          "38": 53,
          "39": 53,
        },
        dataHex:
          "34643431323736306634626530393339666139316365633162326436333564373363613738333535",
        dataString: "4d4127...",
      },
    ],
    currentStack: [
      {
        dataBinary: {},
        dataBytes: {
          "0": 60,
          "1": 115,
          "2": 105,
          "3": 103,
          "4": 62,
        },
        dataHex: "3c7369673e",
        dataString: "<sig>",
      },
      {
        dataBinary: {},
        dataBytes: {
          "0": 60,
          "1": 112,
          "2": 117,
          "3": 98,
          "4": 107,
          "5": 101,
          "6": 121,
          "7": 62,
        },
        dataHex: "3c7075626b65793e",
        dataString: "<pubkey>",
      },
      {
        dataBinary: {},
        dataBytes: {
          "0": 52,
          "1": 100,
          "2": 52,
          "3": 49,
          "4": 50,
          "5": 55,
          "6": 54,
          "7": 48,
          "8": 102,
          "9": 52,
          "10": 98,
          "11": 101,
          "12": 48,
          "13": 57,
          "14": 51,
          "15": 57,
          "16": 102,
          "17": 97,
          "18": 57,
          "19": 49,
          "20": 99,
          "21": 101,
          "22": 99,
          "23": 49,
          "24": 98,
          "25": 50,
          "26": 100,
          "27": 54,
          "28": 51,
          "29": 53,
          "30": 100,
          "31": 55,
          "32": 51,
          "33": 99,
          "34": 97,
          "35": 55,
          "36": 56,
          "37": 51,
          "38": 53,
          "39": 53,
        },
        dataHex:
          "34643431323736306634626530393339666139316365633162326436333564373363613738333535",
        dataString: "4d4127...",
      },
      {
        dataBinary: {},
        dataBytes: {
          "0": 52,
          "1": 100,
          "2": 52,
          "3": 49,
          "4": 50,
          "5": 55,
          "6": 54,
          "7": 48,
          "8": 102,
          "9": 52,
          "10": 98,
          "11": 101,
          "12": 48,
          "13": 57,
          "14": 51,
          "15": 57,
          "16": 102,
          "17": 97,
          "18": 57,
          "19": 49,
          "20": 99,
          "21": 101,
          "22": 99,
          "23": 49,
          "24": 98,
          "25": 50,
          "26": 100,
          "27": 54,
          "28": 51,
          "29": 53,
          "30": 100,
          "31": 55,
          "32": 51,
          "33": 99,
          "34": 97,
          "35": 55,
          "36": 56,
          "37": 51,
          "38": 53,
          "39": 53,
        },
        dataHex:
          "34643431323736306634626530393339666139316365633162326436333564373363613738333535",
        dataString: "4d4127...",
      },
      {
        dataHex: "3c7075626b65793e",
        dataString: "1",
      }
    ],
    opCode: {
      name: "OP_EQUALVERIFY",
      number: 136,
      hex: "0x88",
      description:
        "Same as OP_EQUAL, but  doesn't push result & stops executing if false.",
    },
  },
  {
    opCode: {
      name: "OP_CHECKSIG",
      number: 136,
      hex: "0x88",
      description:
        "Same as OP_EQUAL, but  doesn't push result & stops executing if false.",
    },
    currentStack: [],
    beforeStack: [
      {
        dataBinary: {},
        dataBytes: {
          "0": 60,
          "1": 115,
          "2": 105,
          "3": 103,
          "4": 62,
        },
        dataHex: "3c7369673e",
        dataString: "<sig>",
      },
      {
        dataBinary: {},
        dataBytes: {
          "0": 60,
          "1": 112,
          "2": 117,
          "3": 98,
          "4": 107,
          "5": 101,
          "6": 121,
          "7": 62,
        },
        dataHex: "3c7075626b65793e",
        dataString: "<pubkey>",
      },
    ],
  },
];

const descriptionText = [
  "Push [witness] onto the stack",
  "Deserialize the witness to get the signature & public key",
  "Deserialize the lockscript to get the public key hash",
  "Duplicate the public key",
  "Executes the HASH160 function on the public key",
  "Push the public key hash onto the stack",
  "Execute OP_EQUALVERIFY",
  "Execute OP_CHECKSIG",
];

const codeBlocks: CodeBlockType[] = [
  {
    code: "# WitnessScript",
    displayType: CodeDisplayBlock.comment,
  },
  {
    code: "<OP_70 - 72> ",
    displayType: CodeDisplayBlock.code,
    step: 0,
  },
  {
    code: "[ecdsa-signature]",
    displayType: CodeDisplayBlock.code,
    step: 1,
  },
  {
    code: "<OP_33> ",
    displayType: CodeDisplayBlock.code,
    step: 2,
  },
  {
    code: "[public-key]",
    displayType: CodeDisplayBlock.code,
    step: 3,
  },
  {
    code: "# PubKeyScript",
    displayType: CodeDisplayBlock.comment,
  },
  {
    code: "<OP_0> ",
    displayType: CodeDisplayBlock.code,
    step: 4,
  },
  {
    code: "<OP_20>",
    displayType: CodeDisplayBlock.code,
    step: 5,
  },
  {
    code: "[hash160 [public-key]]",
    displayType: CodeDisplayBlock.code,
    step: 6,
  },
];

const P2WPKH: SCRIPTS_PAGE_PROPS = {
  descriptionText: descriptionText,
  codeBlocks,
  STACK_DATA: P2WPKH_STEPS,
  shortHand: "P2WPKH",
  longHand: "(pay to witness public key hash)",
  shortDescription:
    "The standard SegWit script for  direct transfers & the most common transaction type.",
  longDescription: [
    " A Pay-to-Witness-Public-Key-Hash (P2WPKH) script is the standard SegWit script for a direct transfer transaction. The logic for a P2WPKH witness script & output pubKeyScript is exactly the same as a P2PKH input sigScript & output pubKeyScript. However, there is a large difference in the op_codes explicitly expressed in the raw transaction. Wallets/clients know that when a P2WPKH output is detected they'll need to insert the common P2PKH op_codes; therefore, a P2WPKH pubKeyScript requires only one specific item: a hashed public key.",
  ],

  introduction: "BIP141",
  opCodeReview:
    "P2WPKH requires the same three (3) pieces of data & four (4) op_codes as P2PKH. However, as we see in the first step below, the initial formatting for the ScriptPubKey is different.",
  inUse: "Yes",
  numberOfOps: "4",
  generalType: "Script",
  linkPath: "/scripts/P2WPKH",
  exampleLink: "",
  image: "/images/P2PK.svg",
};

export default P2WPKH;
